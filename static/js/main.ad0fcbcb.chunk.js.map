{"version":3,"sources":["components/Card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","components/ErrorBoundry.js","containers/App.js","serviceWorker.js","index.js"],"names":["Card","name","email","id","className","alt","src","CardList","robots","cardArray","map","user","i","key","SearchBox","searchField","searchChange","type","placeholder","onChange","Scroll","props","style","overflowY","border","height","children","ErrorBoundry","state","hasError","error","info","this","setState","Component","App","onSearchChange","event","target","value","console","log","fetch","then","response","json","users","filteredRobots","filter","robot","toLowerCase","includes","length","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","message"],"mappings":"oOAiBeA,EAdF,SAAC,GAAqB,IAApBC,EAAmB,EAAnBA,KAAKC,EAAc,EAAdA,MAAMC,EAAQ,EAARA,GACzB,OACC,yBAAKC,UAAU,uDACd,yBAAKC,IAAI,SAASC,IAAG,+BAA2BH,EAA3B,mBACrB,6BACC,4BAAKF,GACL,+BAAKC,MCYMK,EAhBE,SAAC,GAAc,IAAbC,EAAY,EAAZA,OAEbC,EAAYD,EAAOE,KAAI,SAACC,EAAKC,GAElC,OAAO,kBAAC,EAAD,CAAMC,IAAMD,EAAGX,KAAQO,EAAOI,GAAGX,KAAMC,MAASM,EAAOI,GAAGV,MAAOC,GAAMK,EAAOI,GAAGT,QAGzF,OACC,6BACEM,ICKYK,EAjBG,SAAC,GAAgC,EAA/BC,YAAgC,IAAnBC,EAAkB,EAAlBA,aAC9B,OACA,yBAAKZ,UAAW,OAEhB,2BAAOA,UAAY,mCACnBa,KAAM,SACNC,YAAa,eACbC,SAAYH,MCGAI,G,MATD,SAACC,GAEd,OACO,yBAAKC,MAAS,CAACC,UAAU,SAAUC,OAAQ,kBAAmBC,OAAO,UACnEJ,EAAMK,YCwBDC,E,kDA1Bd,WAAaN,GACZ,IAAD,8BACC,cAAMA,IAEDO,MAAQ,CACZC,UAAU,GAJZ,E,8DAOkBC,EAAOC,GAExBC,KAAKC,SAAS,CAACJ,UAAS,M,+BAMzB,OAAGG,KAAKJ,MAAMC,SAEP,4DAEAG,KAAKX,MAAMK,a,GAtBQQ,aC4DZC,E,kDArDd,aAAe,IAAD,8BACb,gBAgBDC,eAAgB,SAACC,GAChB,EAAKJ,SAAS,CAAClB,YAAasB,EAAMC,OAAOC,QAEzCC,QAAQC,IAAIJ,EAAMC,OAAOC,QAlBzB,EAAKX,MAAQ,CAEZpB,OAAQ,GACRO,YAAa,IALD,E,gEAUb,IAAD,OAEC2B,MAAM,8CACLC,MAAM,SAAAC,GAAQ,OAAIA,EAASC,UAC3BF,MAAK,SAAAG,GAAK,OAAI,EAAKb,SAAS,CAACzB,OAAOsC,S,+BAS7B,IAAD,OAGFC,EAAiBf,KAAKJ,MAAMpB,OAAOwC,QAAO,SAAAC,GAC9C,OAAOA,EAAMhD,KAAKiD,cAAcC,SAAS,EAAKvB,MAAMb,YAAYmC,kBAElE,OAAiC,IAA7BlB,KAAKJ,MAAMpB,OAAO4C,OACd,wCAOR,yBAAKhD,UAAY,MAChB,wBAAIA,UAAW,MAAf,iBACA,kBAAC,EAAD,CAAWY,aAAgBgB,KAAKI,iBAEhC,kBAAC,EAAD,KACA,kBAAC,EAAD,KACA,kBAAC,EAAD,CAAU5B,OAAUuC,W,GA7CJb,a,MCIEmB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCVNC,IAASC,OAAO,kBAAC,EAAD,MAAQC,SAASC,eAAe,SD2H1C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBrB,MAAK,SAAAsB,GACJA,EAAaC,gBAEdC,OAAM,SAAArC,GACLU,QAAQV,MAAMA,EAAMsC,a","file":"static/js/main.ad0fcbcb.chunk.js","sourcesContent":["import React from 'react';\r\n\r\n\r\nconst Card = ({name,email,id}) => {\r\n\treturn (\r\n\t\t<div className='tc grow bg-light-green br3 pa3 ma2 dib bw2 shadow-5' >\r\n\t\t\t<img alt='robots' src ={`https://robohash.org/${id}?size=200x200`}/>\r\n\t\t\t<div>\r\n\t\t\t\t<h2>{name}</h2>\r\n\t\t\t\t<p> {email}</p>\r\n\t\t\t</div>\r\n\t\t</div>\r\n\r\n\t\t);\r\n\r\n}\r\n\r\nexport default Card;\r\n","import React from 'react';\r\nimport Card from './Card';\r\n// import {robots} from './Robots';\r\n\r\n\r\nconst CardList = ({robots}) => {\r\n\r\nconst cardArray = robots.map((user,i) => {\r\n\r\n\treturn <Card key ={i} name = {robots[i].name} email = {robots[i].email} id = {robots[i].id}/>\r\n\t\t\t\t\t\t\t\t\t\t\t})\r\n\r\nreturn(\r\n\t<div>\r\n\t\t{cardArray}\r\n\t</div>\r\n\t);\r\n\r\n\r\n}\r\n\r\nexport default CardList;\r\n\r\n","import React from 'react';\r\n\r\nconst SearchBox = ({searchField, searchChange}) => {\r\n\t  return(\r\n\t \t<div className= \"pa2\">\r\n\r\n\t \t<input className = \"pa3 ba b--green bg-lightest-blue\"\r\n\t \ttype ='search' \r\n\t \tplaceholder= 'search robot'\r\n\t \tonChange = {searchChange}\r\n\r\n\t \t/>\r\n\t \t\r\n\r\n\t \t</div>\r\n\r\n\t );\r\n}\r\n\r\nexport default SearchBox;","import React from 'react';\r\n\r\n\r\nconst Scroll =(props) =>{\r\n\r\n\treturn (\r\n        <div style = {{overflowY:'scroll', border: '3px solid black', height:'500px' }}>   \r\n         {props.children}\r\n        </div>\r\n        );\r\n}\r\n\r\nexport default Scroll","import React, {Component} from 'react';\r\n\r\n\r\nclass ErrorBoundry extends Component\r\n{\r\n\tconstructor (props)\r\n\t{\r\n\t\tsuper(props);\r\n\r\n\t\tthis.state = {\r\n\t\t\thasError: false\r\n\t\t\t\t\t }\r\n\t}\r\n\tcomponentDidCatch(error, info){\r\n\r\n\t\tthis.setState({hasError:true})\r\n\t}\r\n\r\n\t\r\nrender(){\r\n\r\n\tif(this.state.hasError){\r\n\r\n\treturn <h1>oops it seems like an error </h1> }\r\n\r\n\treturn this.props.children;\r\n\r\n\t}\r\n\r\n}\r\n\r\nexport default ErrorBoundry;","import React, {Component} from 'react';\r\nimport CardList from '../components/CardList';\r\nimport SearchBox from '../components/SearchBox';\r\nimport './app.css';\r\nimport Scroll from '../components/Scroll';\r\nimport ErrorBoundry from '../components/ErrorBoundry'\r\n\r\n\r\nclass App extends Component {\r\n\r\n\tconstructor() {\r\n\t\tsuper()\r\n\t\tthis.state = {\r\n\r\n\t\t\trobots: [],\r\n\t\t\tsearchField: ''\r\n\r\n\t\t\t\t\t }\r\n\t\t\t\t\t}\r\n\tcomponentDidMount()\r\n\t{\r\n\r\n\t\tfetch('https://jsonplaceholder.typicode.com/users')\r\n\t\t.then (response => response.json())\r\n\t\t.then(users => this.setState({robots:users}))\r\n\t}\r\n//in order to manage the search field and update its content (with setState)\r\n\tonSearchChange =(event) => {\r\n\t\tthis.setState({searchField: event.target.value})\r\n\r\n\t\tconsole.log(event.target.value);\r\n\r\n\t\t}\r\nrender (){\r\n\r\n\t//comparing the text typed in the searchfield and the list of the robots\r\n\tconst filteredRobots = this.state.robots.filter(robot =>{\r\n\t\t\treturn robot.name.toLowerCase().includes(this.state.searchField.toLowerCase());\r\n\t\t})\r\n\tif (this.state.robots.length === 0){\r\n\t\treturn <h1>Loading </h1>\r\n\t}\r\n\telse {\r\n\r\n\t\r\n\treturn (\r\n\r\n\t<div className = 'tc'>\r\n\t\t<h1 className ='f1' > Robofriends </h1>\r\n\t\t<SearchBox searchChange = {this.onSearchChange}/>\r\n\t\t\r\n\t\t<Scroll>\r\n\t\t<ErrorBoundry>\r\n\t\t<CardList robots = {filteredRobots} />\r\n\t\t</ErrorBoundry>\r\n\t\t</Scroll>\r\n\t</div>\r\n\t\t\t\r\n\t\t );\r\n\t\t \t}\t\r\n   }\r\n}\r\n\r\nexport default App;\r\n\r\n\r\n\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './containers/App';\nimport 'tachyons';\nimport * as serviceWorker from './serviceWorker';\n\n\nReactDOM.render(<App/>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}